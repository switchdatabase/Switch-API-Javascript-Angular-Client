/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.DBOperationsApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Switch API is the primary endpoint of data sevices and Switch DB&#39;s platform. You can do adding, editing, deleting or listing data works to your database with query operations by using this low-level API based on HTTP.
 * Version: 1.2.1
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.DBOperationsApi');

goog.require('API.Client.AddResponse');
goog.require('API.Client.Body');
goog.require('API.Client.Error');
goog.require('API.Client.SetResponse');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.DBOperationsApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('DBOperationsApiBasePath') ?
                   /** @type {!string} */ ($injector.get('DBOperationsApiBasePath')) :
                   'http://tr02.switchapi.com/';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('DBOperationsApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('DBOperationsApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.DBOperationsApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Add is used for adding a data object to the list created at Switch DB.
 * You can choose the list that will be added tha data set to with List parameter that will be sent to Header. It&#39;s equal to INSERT query at the relational databases model. The data set that will be added to the database is transmited at request body. For versions upper than v1.2.1, if the data sent is an array, all items in the array are added one by one, so they are added as a whole. 
 * @param {!string} aPIKey Your Switch API Key.
 * @param {!string} accessToken Your Access Token.
 * @param {!string} list Your data list name.
 * @param {!string} body Your new value JSON.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.AddResponse>}
 */
API.Client.DBOperationsApi.prototype.addPost = function(aPIKey, accessToken, list, body, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Add';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'aPIKey' is set
  if (!aPIKey) {
    throw new Error('Missing required parameter aPIKey when calling addPost');
  }
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling addPost');
  }
  // verify required parameter 'list' is set
  if (!list) {
    throw new Error('Missing required parameter list when calling addPost');
  }
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling addPost');
  }
  headerParams['APIKey'] = aPIKey;

  headerParams['AccessToken'] = accessToken;

  headerParams['List'] = list;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * It&#39;s used for listing a data added before.
 * List parameter sent remarks the list that will be do listing work on at Header. It&#39;s equal to SELECT query at relational databases. 
 * @param {!string} aPIKey Your Switch API Key.
 * @param {!string} accessToken Your Access Token.
 * @param {!string} list Your data list name.
 * @param {!Body} body Your Switch DB Query.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DBOperationsApi.prototype.listPost = function(aPIKey, accessToken, list, body, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/List';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'aPIKey' is set
  if (!aPIKey) {
    throw new Error('Missing required parameter aPIKey when calling listPost');
  }
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling listPost');
  }
  // verify required parameter 'list' is set
  if (!list) {
    throw new Error('Missing required parameter list when calling listPost');
  }
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling listPost');
  }
  headerParams['APIKey'] = aPIKey;

  headerParams['AccessToken'] = accessToken;

  headerParams['List'] = list;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * It&#39;s used for deleting a data added before at Switch DB.
 * List parameter sent remarks the list that will be deleted data from at Header and ListItemId parameter remarks the ID consisted by Switch DB for the data that will be deleted. It&#39;s equal to DELETE query at relational databases. 
 * @param {!string} aPIKey Your Switch API Key.
 * @param {!string} accessToken Your Access Token.
 * @param {!string} list Your data list name.
 * @param {!string} listItemId Your list item id.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.SetResponse>}
 */
API.Client.DBOperationsApi.prototype.setDelete = function(aPIKey, accessToken, list, listItemId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Set';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'aPIKey' is set
  if (!aPIKey) {
    throw new Error('Missing required parameter aPIKey when calling setDelete');
  }
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling setDelete');
  }
  // verify required parameter 'list' is set
  if (!list) {
    throw new Error('Missing required parameter list when calling setDelete');
  }
  // verify required parameter 'listItemId' is set
  if (!listItemId) {
    throw new Error('Missing required parameter listItemId when calling setDelete');
  }
  headerParams['APIKey'] = aPIKey;

  headerParams['AccessToken'] = accessToken;

  headerParams['List'] = list;

  headerParams['ListItemId'] = listItemId;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * It&#39;s used for updating a data object that is already added to Switch DB.
 * In order to UPDATE a object, Listname and ListItemId parameters should be sent in the Header of the REQUEST as \&quot;List\&quot;, \&quot;ListItemId\&quot;, respectively, as shown in the example below. It&#39;s equal to UPDATE query at relational databases. The data set that will be edited is transmited to the database at request body. 
 * @param {!string} aPIKey Your Switch API Key.
 * @param {!string} accessToken Your Access Token.
 * @param {!string} list Your data list name.
 * @param {!string} listItemId Your list item id.
 * @param {!string} body Your new value JSON.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.SetResponse>}
 */
API.Client.DBOperationsApi.prototype.setPost = function(aPIKey, accessToken, list, listItemId, body, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Set';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'aPIKey' is set
  if (!aPIKey) {
    throw new Error('Missing required parameter aPIKey when calling setPost');
  }
  // verify required parameter 'accessToken' is set
  if (!accessToken) {
    throw new Error('Missing required parameter accessToken when calling setPost');
  }
  // verify required parameter 'list' is set
  if (!list) {
    throw new Error('Missing required parameter list when calling setPost');
  }
  // verify required parameter 'listItemId' is set
  if (!listItemId) {
    throw new Error('Missing required parameter listItemId when calling setPost');
  }
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling setPost');
  }
  headerParams['APIKey'] = aPIKey;

  headerParams['AccessToken'] = accessToken;

  headerParams['List'] = list;

  headerParams['ListItemId'] = listItemId;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
