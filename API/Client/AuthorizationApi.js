/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.AuthorizationApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Switch API is the primary endpoint of data sevices and Switch DB&#39;s platform. You can do adding, editing, deleting or listing data works to your database with query operations by using this low-level API based on HTTP.
 * Version: 1.2.1
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.AuthorizationApi');

goog.require('API.Client.Error');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.AuthorizationApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('AuthorizationApiBasePath') ?
                   /** @type {!string} */ ($injector.get('AuthorizationApiBasePath')) :
                   'http://tr02.switchapi.com/';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('AuthorizationApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('AuthorizationApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.AuthorizationApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Generate Access Token
 * For generating Access Token, you need API Key and API Secret parameters that are provided from the developer portal. At the request, API Key that will be sent by using header is generated as portal API Key and Signature parameter is generated as md5(APISecret + ExpireTimestamp) format. At Expire parameter, token&#39;s expire date and time information must be proper to ISO 8601 standarts and Unix Time format with msec information. 
 * @param {!string} aPIKey Your Switch API Key.
 * @param {!string} signature Signature parameter is generated as md5(APISecret + ExpireTimestamp) format.
 * @param {!number} expire Expire parameter, token&#39;s expire date and time information must be proper to ISO 8601 standarts and Unix Time format with msec information.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.AuthorizationApi.prototype.tokenGet = function(aPIKey, signature, expire, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/Token';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'aPIKey' is set
  if (!aPIKey) {
    throw new Error('Missing required parameter aPIKey when calling tokenGet');
  }
  // verify required parameter 'signature' is set
  if (!signature) {
    throw new Error('Missing required parameter signature when calling tokenGet');
  }
  // verify required parameter 'expire' is set
  if (!expire) {
    throw new Error('Missing required parameter expire when calling tokenGet');
  }
  headerParams['APIKey'] = aPIKey;

  headerParams['Signature'] = signature;

  headerParams['Expire'] = expire;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
